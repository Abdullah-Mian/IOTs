/*
 * ESP32 WROOM32 - UDP Client with Auto-Discovery
 * Automatically finds server IP via broadcast discovery
 * Controls L298N motor driver
 */

#include <WiFi.h>
#include <WiFiUdp.h>

// WiFi credentials - ONLY CHANGE THESE!
const char* ssid = "YOUR_HOTSPOT_NAME";
const char* password = "YOUR_HOTSPOT_PASSWORD";

// Server configuration - AUTO-DISCOVERED
String serverIP = "";
int serverPort = 4210;
const int discoveryPort = 4209;
const int localPort = 4211;

// L298N Motor Driver Pins
#define ENA_PIN  14
#define IN1_PIN  27
#define IN2_PIN  26
#define ENB_PIN  12
#define IN3_PIN  25
#define IN4_PIN  33
#define LED_PIN  2

// PWM Configuration
const int pwmFreq = 1000;
const int pwmResolution = 8;
const int pwmChannelA = 0;
const int pwmChannelB = 1;

// Default speed
const int DEFAULT_SPEED = 200;

// UDP
WiFiUDP udp;
WiFiUDP discoveryUdp;

// Connection tracking
unsigned long lastPacketTime = 0;
unsigned long lastPingTime = 0;
const unsigned long PING_INTERVAL = 5000;
const unsigned long TIMEOUT = 2000;
bool serverFound = false;

// Statistics
unsigned long packetsReceived = 0;

// Motor control functions
void moveForward(int speed) {
  Serial.println("⬆️  FORWARD");
  digitalWrite(IN1_PIN, HIGH);
  digitalWrite(IN2_PIN, LOW);
  ledcWrite(pwmChannelA, speed);
  digitalWrite(IN3_PIN, HIGH);
  digitalWrite(IN4_PIN, LOW);
  ledcWrite(pwmChannelB, speed);
}

void moveBackward(int speed) {
  Serial.println("⬇️  BACKWARD");
  digitalWrite(IN1_PIN, LOW);
  digitalWrite(IN2_PIN, HIGH);
  ledcWrite(pwmChannelA, speed);
  digitalWrite(IN3_PIN, LOW);
  digitalWrite(IN4_PIN, HIGH);
  ledcWrite(pwmChannelB, speed);
}

void turnLeft(int speed) {
  Serial.println("⬅️  LEFT");
  digitalWrite(IN1_PIN, HIGH);
  digitalWrite(IN2_PIN, LOW);
  ledcWrite(pwmChannelA, speed);
  digitalWrite(IN3_PIN, LOW);
  digitalWrite(IN4_PIN, HIGH);
  ledcWrite(pwmChannelB, speed);
}

void turnRight(int speed) {
  Serial.println("➡️  RIGHT");
  digitalWrite(IN1_PIN, LOW);
  digitalWrite(IN2_PIN, HIGH);
  ledcWrite(pwmChannelA, speed);
  digitalWrite(IN3_PIN, HIGH);
  digitalWrite(IN4_PIN, LOW);
  ledcWrite(pwmChannelB, speed);
}

void stopMotors() {
  Serial.println("🛑 STOP");
  digitalWrite(IN1_PIN, LOW);
  digitalWrite(IN2_PIN, LOW);
  ledcWrite(pwmChannelA, 0);
  digitalWrite(IN3_PIN, LOW);
  digitalWrite(IN4_PIN, LOW);
  ledcWrite(pwmChannelB, 0);
}

void executeCommand(char cmd) {
  switch(cmd) {
    case 'W':
      moveForward(DEFAULT_SPEED);
      break;
    case 'S':
      moveBackward(DEFAULT_SPEED);
      break;
    case 'A':
      turnLeft(DEFAULT_SPEED);
      break;
    case 'D':
      turnRight(DEFAULT_SPEED);
      break;
    case 'X':
    case 'B':
    default:
      stopMotors();
      break;
  }
}

bool discoverServer() {
  Serial.println("\n🔍 Searching for server...");
  
  discoveryUdp.begin(discoveryPort);
  
  unsigned long startTime = millis();
  const unsigned long timeout = 10000; // 10 second timeout
  
  while (millis() - startTime < timeout) {
    int packetSize = discoveryUdp.parsePacket();
    
    if (packetSize) {
      char incomingPacket[255];
      int len = discoveryUdp.read(incomingPacket, 254);
      
      if (len > 0) {
        incomingPacket[len] = 0;
        String message = String(incomingPacket);
        
        // Check if this is a server announcement
        if (message.startsWith("ESP32_SERVER:")) {
          // Parse: ESP32_SERVER:192.168.1.100:4210
          int firstColon = message.indexOf(':');
          int secondColon = message.indexOf(':', firstColon + 1);
          
          if (firstColon > 0 && secondColon > 0) {
            serverIP = message.substring(firstColon + 1, secondColon);
            serverPort = message.substring(secondColon + 1).toInt();
            
            Serial.println("✅ Server discovered!");
            Serial.print("   IP: ");
            Serial.println(serverIP);
            Serial.print("   Port: ");
            Serial.println(serverPort);
            
            discoveryUdp.stop();
            return true;
          }
        }
      }
    }
    
    delay(100);
  }
  
  discoveryUdp.stop();
  Serial.println("❌ Server discovery timeout");
  return false;
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("\n╔═══════════════════════════════════════╗");
  Serial.println("║  ESP32 WROOM32 UDP Client (L298N)    ║");
  Serial.println("║        AUTO-DISCOVERY ENABLED         ║");
  Serial.println("╚═══════════════════════════════════════╝\n");
  
  // Configure LED
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  
  // Configure motor pins
  pinMode(IN1_PIN, OUTPUT);
  pinMode(IN2_PIN, OUTPUT);
  pinMode(IN3_PIN, OUTPUT);
  pinMode(IN4_PIN, OUTPUT);
  
  // Setup PWM
  ledcSetup(pwmChannelA, pwmFreq, pwmResolution);
  ledcSetup(pwmChannelB, pwmFreq, pwmResolution);
  ledcAttachPin(ENA_PIN, pwmChannelA);
  ledcAttachPin(ENB_PIN, pwmChannelB);
  
  stopMotors();
  Serial.println("✅ Motor driver initialized");
  
  // Connect to WiFi
  Serial.print("📡 Connecting to WiFi");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n✅ WiFi Connected!");
    Serial.print("📍 IP Address: ");
    Serial.println(WiFi.localIP());
    Serial.print("📡 Signal Strength: ");
    Serial.print(WiFi.RSSI());
    Serial.println(" dBm");
  } else {
    Serial.println("\n❌ WiFi Connection Failed!");
    Serial.println("⚠️  Check SSID and password, then restart");
    while(1) delay(1000);
  }
  
  // Auto-discover server
  Serial.println("\n🔍 Starting auto-discovery...");
  
  for (int retry = 0; retry < 3; retry++) {
    if (discoverServer()) {
      serverFound = true;
      break;
    }
    
    if (retry < 2) {
      Serial.println("   Retrying in 2 seconds...");
      delay(2000);
    }
  }
  
  if (!serverFound) {
    Serial.println("\n❌ Could not find server!");
    Serial.println("⚠️  Make sure Python server is running");
    Serial.println("⚠️  Waiting 30 seconds before restart...");
    delay(30000);
    ESP.restart();
  }
  
  // Start UDP
  udp.begin(localPort);
  Serial.print("✅ UDP Client started on port ");
  Serial.println(localPort);
  
  // Register with server
  udp.beginPacket(serverIP.c_str(), serverPort);
  udp.print("WROOM:READY");
  udp.endPacket();
  Serial.println("📡 Registration sent to server");
  
  Serial.println("\n🎮 Waiting for commands...\n");
  Serial.println("───────────────────────────────────────");
}

void loop() {
  // Check WiFi connection
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("⚠️  WiFi disconnected! Reconnecting...");
    stopMotors();
    WiFi.reconnect();
    delay(5000);
    return;
  }
  
  // Re-discover server if connection lost
  if (!serverFound || serverIP.length() == 0) {
    Serial.println("⚠️  Server lost, re-discovering...");
    stopMotors();
    if (discoverServer()) {
      serverFound = true;
      // Re-register
      udp.beginPacket(serverIP.c_str(), serverPort);
      udp.print("WROOM:READY");
      udp.endPacket();
    } else {
      delay(5000);
      return;
    }
  }
  
  // Send periodic ping
  if (millis() - lastPingTime > PING_INTERVAL) {
    udp.beginPacket(serverIP.c_str(), serverPort);
    udp.print("PING_WROOM");
    udp.endPacket();
    lastPingTime = millis();
  }
  
  // Check for incoming packets
  int packetSize = udp.parsePacket();
  if (packetSize) {
    char incomingPacket[255];
    int len = udp.read(incomingPacket, 255);
    
    if (len > 0) {
      incomingPacket[len] = 0;
      packetsReceived++;
      lastPacketTime = millis();
      
      digitalWrite(LED_PIN, HIGH);
      
      Serial.println("╔════════════════════════════════╗");
      Serial.print("║ 📥 Received: ");
      Serial.print(incomingPacket);
      Serial.println("                  ║");
      Serial.print("║ 📊 Packets: ");
      Serial.print(packetsReceived);
      Serial.println("                   ║");
      Serial.println("╚════════════════════════════════╝");
      
      // Execute command (only first character)
      if (len > 0) {
        executeCommand(incomingPacket[0]);
      }
      
      Serial.println();
      digitalWrite(LED_PIN, LOW);
    }
  }
  
  // Auto-stop if no packets for TIMEOUT period
  if (packetsReceived > 0 && (millis() - lastPacketTime > TIMEOUT)) {
    static unsigned long lastWarning = 0;
    if (millis() - lastWarning > 1000) {
      stopMotors();
      Serial.println("⚠️  Connection timeout - Motors stopped!");
      lastWarning = millis();
    }
  }
  
  delay(10);
}